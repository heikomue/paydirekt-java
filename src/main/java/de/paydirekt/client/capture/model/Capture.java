package de.paydirekt.client.capture.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import de.paydirekt.client.rest.HalResource;
import de.paydirekt.client.rest.Link;

import java.math.BigDecimal;
import java.util.Map;
import java.util.Objects;

/**
 * A capture is a cash flow from the customer to the merchant.
 */
public class Capture extends HalResource {

    private final CaptureType type;
    private final String transactionId;
    private final BigDecimal amount;
    private final Boolean finalCapture;
    private final String merchantCaptureReferenceNumber;
    private final String merchantReconciliationReferenceNumber;
    private final String captureInvoiceReferenceNumber;
    private final String callbackUrlStatusUpdates;
    private final String paymentInformationId;
    private final CaptureStatus status;

    /**
     * Constructor.
     *
     * @param type                                  Type of the capture transaction.
     * @param transactionId                         Id of the transaction, generated by the paydirekt system.
     * @param amount                                The value of the order.
     * @param finalCapture                          Whether this is the final capture of a checkout.
     * @param merchantCaptureReferenceNumber        Internal reference number, provided by the merchant
     * @param merchantReconciliationReferenceNumber Internal reconciliation number, provided by the merchant.
     * @param captureInvoiceReferenceNumber         Internal unique invoice reference number, provided by the merchant.
     * @param callbackUrlStatusUpdates              Callback URL of a endpoint that listens for changes in status.
     * @param paymentInformationId                  Payment information id of the transaction, used to combine single transactions.
     * @param status                                Signalized the status of the bank authorization for the payment.
     * @param embedded                              Embedded resources.
     * @param links                                 Links to resources.
     */
    public Capture(@JsonProperty("type") CaptureType type,
                   @JsonProperty("transactionId") String transactionId,
                   @JsonProperty("amount") BigDecimal amount,
                   @JsonProperty("finalCapture") Boolean finalCapture,
                   @JsonProperty("merchantCaptureReferenceNumber") String merchantCaptureReferenceNumber,
                   @JsonProperty("merchantReconciliationReferenceNumber") String merchantReconciliationReferenceNumber,
                   @JsonProperty("captureInvoiceReferenceNumber") String captureInvoiceReferenceNumber,
                   @JsonProperty("callbackUrlStatusUpdates") String callbackUrlStatusUpdates,
                   @JsonProperty("paymentInformationId") String paymentInformationId,
                   @JsonProperty("status") CaptureStatus status,
                   @JsonProperty("_embedded") Map<String, Object> embedded,
                   @JsonProperty("_links") Map<String, Link> links) {
        super(embedded, links);
        this.type = type;
        this.transactionId = transactionId;
        this.amount = amount;
        this.finalCapture = finalCapture;
        this.merchantCaptureReferenceNumber = merchantCaptureReferenceNumber;
        this.merchantReconciliationReferenceNumber = merchantReconciliationReferenceNumber;
        this.captureInvoiceReferenceNumber = captureInvoiceReferenceNumber;
        this.callbackUrlStatusUpdates = callbackUrlStatusUpdates;
        this.paymentInformationId = paymentInformationId;
        this.status = status;
    }

    public CaptureType getType() {
        return type;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public Boolean getFinalCapture() {
        return finalCapture;
    }

    public String getMerchantCaptureReferenceNumber() {
        return merchantCaptureReferenceNumber;
    }

    public String getMerchantReconciliationReferenceNumber() {
        return merchantReconciliationReferenceNumber;
    }

    public String getCaptureInvoiceReferenceNumber() {
        return captureInvoiceReferenceNumber;
    }

    public String getCallbackUrlStatusUpdates() {
        return callbackUrlStatusUpdates;
    }

    public String getPaymentInformationId() {
        return paymentInformationId;
    }

    public CaptureStatus getStatus() {
        return status;
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, transactionId, amount, finalCapture, merchantCaptureReferenceNumber, merchantReconciliationReferenceNumber, captureInvoiceReferenceNumber, callbackUrlStatusUpdates, paymentInformationId, status);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Capture)) {
            return false;
        }
        final Capture other = (Capture) obj;
        return Objects.equals(type, other.type)
                && Objects.equals(transactionId, other.transactionId)
                && Objects.equals(amount, other.amount)
                && Objects.equals(finalCapture, other.finalCapture)
                && Objects.equals(merchantCaptureReferenceNumber, other.merchantCaptureReferenceNumber)
                && Objects.equals(merchantReconciliationReferenceNumber, other.merchantReconciliationReferenceNumber)
                && Objects.equals(captureInvoiceReferenceNumber, other.captureInvoiceReferenceNumber)
                && Objects.equals(callbackUrlStatusUpdates, other.callbackUrlStatusUpdates)
                && Objects.equals(paymentInformationId, other.paymentInformationId)
                && Objects.equals(status, other.status);
    }
}
